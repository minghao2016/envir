% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/attach_source.R
\name{attach_source}
\alias{attach_source}
\title{Source R files into an attached environment}
\usage{
attach_source(
  ...,
  name = as_tidy_env_name(c(...), prefix = "source:"),
  recursive = FALSE,
  pos = 2L,
  chdir = FALSE,
  warn.conflicts = TRUE,
  mask.ok = NULL
)
}
\arguments{
\item{...}{filepaths to R files, or paths to directories containing R files.}

\item{name}{A string, the name for the attached environment. By default, the
name is constructed from paths supplied to \code{...}. If the requested name is
not on the search path, a new environment of this name is attached.}

\item{recursive}{If directories are passed to \code{...}, whether to search them
recursively.}

\item{pos}{The position where to attach the environment, if creating a new
one. If an environment of \code{name} already exists, \code{pos} is ignored.}

\item{chdir}{logical. if TRUE, the \R working directory is temporarily
changed to the directory containing the file(s) being sourced.}

\item{warn.conflicts}{logical. If TRUE (the default), print warnings about
objects in the attached environment that that are masking or masked by
other objects of the same name.}

\item{mask.ok}{character vector of names of objects that can mask objects on
the search path without signaling a warning if \code{warn.conflicts} is \code{TRUE}}
}
\value{
the attached environment, invisibly.
}
\description{
Source R files into an attached environment
}
\note{
One subtlety that is sometimes important: the global environment or any
packages attached after this is called will not on the search path for the
environment where the source is evaluated. The search path of the
environment the R files are sourced in is \code{search()[-(1:(pos-1))]}. So
for, example, functions defined in the sources will not see functions from
subsequent \code{library} calls. This is by design. However, if you want the R
functions defined in the sources to have the global environment (and all
other attached environments) on their search path, then you can do
something like:

\code{attach_eval({ import_from(c(filepaths), "**") })}

Instead of sourcing files directly in the attached environment, this snippet
sources the files into a new environment that inherits from \code{.Globalenv},
and then copies over everything to the attached environment.
}
\seealso{
import_from, set_library_default_pos
}
